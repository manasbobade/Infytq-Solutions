
from abc import ABCMeta,abstractmethod
class DirectToHomeService(metaclass=ABCMeta):
    __counter=101
    def __init__(self,consumer_name):
        self.__consumer_number=DirectToHomeService.__counter
        DirectToHomeService.__counter += 1
        self.__consumer_name=consumer_name
    def get_consumer_name(self):
        return self.__consumer_name
    def get_consumer_number(self):
        return self.__consumer_number
    @abstractmethod
    def calculate_monthly_rent(self):
        pass



class BasePackage(DirectToHomeService):
    def __init__(self,subscription_period,base_pack_name,consumer_name):
        super().__init__(consumer_name)

        self.__base_pack_name=base_pack_name
        self.__subscription_period = subscription_period
    def validate_base_pack_name(self):
        packages=["Silver","Gold","Platinum"]
        if self.__base_pack_name in packages:
            return True
        self.__base_pack_name="Silver"
        print("Base package name is incorrect, set to Silver")
    def calculate_monthly_rent(self):
        if not 1<=self.__subscription_period<=24:
            return -1
        self.validate_base_pack_name()
        monthly_charges={'Silver':350,'Gold':440,'Platinum':560}
        total_charge=monthly_charges[self.__base_pack_name]*self.__subscription_period
        if self.__subscription_period>12:
            total_charge-=monthly_charges[self.__base_pack_name]
        return total_charge/self.__subscription_period
    def get_subscription_period(self):
        return self.__subscription_period
    def get_base_pack_name(self):
        return self.__base_pack_name

obj=BasePackage(23,'Silver',"cus1")