Q1 of 3
Analyze the below code snippet and identify how many objects and reference variables will be there at the end of line 9.

class Table:                 #Line1
    def __init__(self):      #Line2
        self.no_of_legs=4    #Line3
        self.glass_top=None  #Line4
        self.wooden_top=None #Line5
dining_table=Table()         #Line6
back_table=Table()           #Line7
front_table=back_table       #Line8
back_table=dining_table      #Line9
a) 2 Objects, 4 Reference Variables

b) 2 Objects, 3 Reference Variables

c) 4 Objects, 2 Reference Variables

d) 4 Objects, 3 Reference Variables

a
b
c
d
Option b is Correct

Explanation :

Line 6 creates a Table object referred by dining_table.
Line 7 creates a Table object referred by back_table.
Line 8 creates a reference variable front_table referring to the object created in Line 7.
Line 9 changes the reference of back_table and makes it refer the object created in Line 6.
Thus at the end of Line 9, 3 reference variables and 2 objects are created.
Hence this is the answer.
Point to be noted: An object may be referred by more than one reference variables.

Q2 of 3
Analyze the below code snippet and identify how many reference variables refer to object created in Line 7 at the end of Line 11?

class Table:                  #Line1
    def __init__(self):       #Line2
        self.no_of_legs=4     #Line3
        self.glass_top=None   #Line4
        self.wooden_top=None  #Line5
dining_table=Table()          #Line6
back_table=Table()            #Line7
front_table=back_table        #Line8
back_table=dining_table       #Line9
dining_table=front_table      #Line10
front_table=back_table        #Line11
 

0
1
2
Option 1 is Correct

Explanation :

Line 6 and 7 creates two Table objects referred by dining_table and back_table respectively.
Line 8 creates a reference variable front_table referring to the object created in Line 7.
Line 9 changes the reference of back_table and makes it refer the object created in Line 6.
Line 10 makes the reference variable, dining_table refer to the object created in Line 7.
Line 11 makes the reference variable, front_table refer to the object created in Line 6.
Thus at the end of Line 11, only dining_table will be referring to the object in Line 7.
Hence this is the answer.
Point to be noted: 

An object may be referred by more than one reference variables.

Reference of an object can be modified.

Q3 of 3
Consider the below code snippet:

class Table:                         #Line1
    def __init__(self):              #Line2
        self.no_of_legs=4            #Line3
        self.glass_top=None          #Line4
        self.wooden_top=None         #Line5
    def identify_rate(self):         #Line6
        if(self.glass_top==True):    #Line7
            rate=20000               #Line8
        elif(self.wooden_top==True): #Line9
            rate=30000               #Line10
        else:                        #Line11
            rate=0                   #Line12
        return rate                  #Line13
dining_table=Table()                 #Line14
Which among the following statements placed after line 14 will result in an error?

dining_table.no_of_legs=6
glass_top=True
print (dining_table.rate)
Option print (dining_table.rate) is Correct

Explanation :

rate is a local variable local to identify_rate() of Table class as a result this line will throw an error.
Hence this is answer.
Point to be noted: A local variable is not attached to any object.